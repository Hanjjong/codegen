/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ResponseWithData } from '../../src/model';
/**
 * SampleApi - axios parameter creator
 * @export
 */
export const SampleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * post api 샘플입니다
         * @summary createSample API
         * @param {string} sampleName request for session
         * @param {} [UNKNOWN_PARAMETER_NAME] request for session
         * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
         * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSample: async (sampleName: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleName' is not null or undefined
            assertParamExists('createSample', 'sampleName', sampleName)
            const localVarPath = `/sample`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sampleName !== undefined) {
                localVarQueryParameter['sampleName'] = sampleName;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['req'] = typeof UNKNOWN_PARAMETER_NAME === 'string'
                    ? UNKNOWN_PARAMETER_NAME
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }

            if (UNKNOWN_PARAMETER_NAME2 != null) {
                localVarHeaderParameter['res'] = typeof UNKNOWN_PARAMETER_NAME2 === 'string'
                    ? UNKNOWN_PARAMETER_NAME2
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME2);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete api 샘플입니다
         * @summary deleteSample API
         * @param {number} sampleId 샘플 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSample: async (sampleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleId' is not null or undefined
            assertParamExists('deleteSample', 'sampleId', sampleId)
            const localVarPath = `/sample/{sampleId}`
                .replace(`{${"sampleId"}}`, encodeURIComponent(String(sampleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get api 샘플입니다
         * @summary getSample API
         * @param {} [UNKNOWN_PARAMETER_NAME] request for session
         * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
         * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSample: async (UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sample`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['req'] = typeof UNKNOWN_PARAMETER_NAME === 'string'
                    ? UNKNOWN_PARAMETER_NAME
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }

            if (UNKNOWN_PARAMETER_NAME2 != null) {
                localVarHeaderParameter['res'] = typeof UNKNOWN_PARAMETER_NAME2 === 'string'
                    ? UNKNOWN_PARAMETER_NAME2
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME2);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SampleApi - functional programming interface
 * @export
 */
export const SampleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SampleApiAxiosParamCreator(configuration)
    return {
        /**
         * post api 샘플입니다
         * @summary createSample API
         * @param {string} sampleName request for session
         * @param {} [UNKNOWN_PARAMETER_NAME] request for session
         * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
         * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSample(sampleName: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSample(sampleName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * delete api 샘플입니다
         * @summary deleteSample API
         * @param {number} sampleId 샘플 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSample(sampleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSample(sampleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get api 샘플입니다
         * @summary getSample API
         * @param {} [UNKNOWN_PARAMETER_NAME] request for session
         * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
         * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSample(UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSample(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SampleApi - factory interface
 * @export
 */
export const SampleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SampleApiFp(configuration)
    return {
        /**
         * post api 샘플입니다
         * @summary createSample API
         * @param {string} sampleName request for session
         * @param {} [UNKNOWN_PARAMETER_NAME] request for session
         * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
         * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSample(sampleName: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.createSample(sampleName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * delete api 샘플입니다
         * @summary deleteSample API
         * @param {number} sampleId 샘플 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSample(sampleId: number, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.deleteSample(sampleId, options).then((request) => request(axios, basePath));
        },
        /**
         * get api 샘플입니다
         * @summary getSample API
         * @param {} [UNKNOWN_PARAMETER_NAME] request for session
         * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
         * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSample(UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.getSample(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SampleApi - object-oriented interface
 * @export
 * @class SampleApi
 * @extends {BaseAPI}
 */
export class SampleApi extends BaseAPI {
    /**
     * post api 샘플입니다
     * @summary createSample API
     * @param {string} sampleName request for session
     * @param {} [UNKNOWN_PARAMETER_NAME] request for session
     * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
     * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public createSample(sampleName: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: AxiosRequestConfig) {
        return SampleApiFp(this.configuration).createSample(sampleName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete api 샘플입니다
     * @summary deleteSample API
     * @param {number} sampleId 샘플 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public deleteSample(sampleId: number, options?: AxiosRequestConfig) {
        return SampleApiFp(this.configuration).deleteSample(sampleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get api 샘플입니다
     * @summary getSample API
     * @param {} [UNKNOWN_PARAMETER_NAME] request for session
     * @param {} [UNKNOWN_PARAMETER_NAME2] response for session
     * @param {} [UNKNOWN_PARAMETER_NAME3] key in Token
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public getSample(UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: AxiosRequestConfig) {
        return SampleApiFp(this.configuration).getSample(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options).then((request) => request(this.axios, this.basePath));
    }
}

