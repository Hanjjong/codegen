/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ErrorResponse } from '../../src/model';
// @ts-ignore
import { ModelLong } from '../../src/model';
// @ts-ignore
import { ResponseWithData } from '../../src/model';
/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 친구 리스트를 받아서 해당 그룹에 일괄 추가
         * @summary add friends to group API
         * @param {ModelLong} groupId 친구를 추가할 그룹 ID
         * @param {Array<string>} requestBody 추가하려는 친구 이름 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFriendsToGroup: async (groupId: ModelLong, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addFriendsToGroup', 'groupId', groupId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addFriendsToGroup', 'requestBody', requestBody)
            const localVarPath = `/v3/group/{groupId}/friend`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 그룹 생성
         * @summary create new group API
         * @param {string} body 그룹 이름
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomGroup: async (body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createCustomGroup', 'body', body)
            const localVarPath = `/v3/group/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 그룹 삭제
         * @summary delete group API
         * @param {ModelLong} groupId 삭제할 그룹 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (groupId: ModelLong, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroup', 'groupId', groupId)
            const localVarPath = `/v3/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기본 그룹을 제외하고 멤버가 가지고 있는 모든 그룹(즐겨찾기 포함) 반환
         * @summary get group list API
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsExceptDefault: async (UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/group/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 멤버가 만든 그룹 & 그룹 내의 친구 리스트 조회(메인화면 용)
         * @summary get group list with friend API
         * @param {ModelLong} id 멤버 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsWithFriend: async (id: ModelLong, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupsWithFriend', 'id', id)
            const localVarPath = `/v3/group/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 멤버가 등록한 그룹 내의 모든 친구 목록 조회
         * @summary get group friend list API
         * @param {ModelLong} groupId 조회를 원하는 그룹 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncludeGroupFriendNames: async (groupId: ModelLong, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getIncludeGroupFriendNames', 'groupId', groupId)
            const localVarPath = `/v3/group/{groupId}/friend`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 그룹에 포함되지 않은 친구 목록을 조회. 그룹에 새로운 친구를 추가하기 위함이다. 이때, 조회되는 친구들은 멤버가 친구로 등록하되 해당 그룹에 등록되지 않은 친구들이다.
         * @summary get not included friends in group API
         * @param {ModelLong} groupId 그룹 ID
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotIncludeGroupFriendNames: async (groupId: ModelLong, UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getNotIncludeGroupFriendNames', 'groupId', groupId)
            const localVarPath = `/v3/group/{groupId}/friend/not-include/`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 친구 리스트를 받아서 해당 그룹에서 일괄 삭제함. 이때, 친구 리스트는 모두 해당 그룹에 속해있어야 함
         * @summary delete group friend API
         * @param {ModelLong} groupId 그룹 id
         * @param {Array<string>} requestBody 삭제하려는 친구 이름 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIncludeGroupFriends: async (groupId: ModelLong, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('removeIncludeGroupFriends', 'groupId', groupId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('removeIncludeGroupFriends', 'requestBody', requestBody)
            const localVarPath = `/v3/group/{groupId}/friend`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 그룹 이름 수정
         * @summary modify group name API
         * @param {ModelLong} groupId 이름을 변경할 그룹 id
         * @param {string} body 변경할 새로운 이름
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupName: async (groupId: ModelLong, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroupName', 'groupId', groupId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateGroupName', 'body', body)
            const localVarPath = `/v3/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 친구 리스트를 받아서 해당 그룹에 일괄 추가
         * @summary add friends to group API
         * @param {ModelLong} groupId 친구를 추가할 그룹 ID
         * @param {Array<string>} requestBody 추가하려는 친구 이름 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFriendsToGroup(groupId: ModelLong, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFriendsToGroup(groupId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 그룹 생성
         * @summary create new group API
         * @param {string} body 그룹 이름
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomGroup(body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomGroup(body, UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 그룹 삭제
         * @summary delete group API
         * @param {ModelLong} groupId 삭제할 그룹 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(groupId: ModelLong, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 기본 그룹을 제외하고 멤버가 가지고 있는 모든 그룹(즐겨찾기 포함) 반환
         * @summary get group list API
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupsExceptDefault(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupsExceptDefault(UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 멤버가 만든 그룹 & 그룹 내의 친구 리스트 조회(메인화면 용)
         * @summary get group list with friend API
         * @param {ModelLong} id 멤버 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupsWithFriend(id: ModelLong, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupsWithFriend(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 멤버가 등록한 그룹 내의 모든 친구 목록 조회
         * @summary get group friend list API
         * @param {ModelLong} groupId 조회를 원하는 그룹 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncludeGroupFriendNames(groupId: ModelLong, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIncludeGroupFriendNames(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 그룹에 포함되지 않은 친구 목록을 조회. 그룹에 새로운 친구를 추가하기 위함이다. 이때, 조회되는 친구들은 멤버가 친구로 등록하되 해당 그룹에 등록되지 않은 친구들이다.
         * @summary get not included friends in group API
         * @param {ModelLong} groupId 그룹 ID
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotIncludeGroupFriendNames(groupId: ModelLong, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotIncludeGroupFriendNames(groupId, UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 친구 리스트를 받아서 해당 그룹에서 일괄 삭제함. 이때, 친구 리스트는 모두 해당 그룹에 속해있어야 함
         * @summary delete group friend API
         * @param {ModelLong} groupId 그룹 id
         * @param {Array<string>} requestBody 삭제하려는 친구 이름 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeIncludeGroupFriends(groupId: ModelLong, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeIncludeGroupFriends(groupId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 그룹 이름 수정
         * @summary modify group name API
         * @param {ModelLong} groupId 이름을 변경할 그룹 id
         * @param {string} body 변경할 새로운 이름
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupName(groupId: ModelLong, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupName(groupId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupApiFp(configuration)
    return {
        /**
         * 친구 리스트를 받아서 해당 그룹에 일괄 추가
         * @summary add friends to group API
         * @param {ModelLong} groupId 친구를 추가할 그룹 ID
         * @param {Array<string>} requestBody 추가하려는 친구 이름 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFriendsToGroup(groupId: ModelLong, requestBody: Array<string>, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.addFriendsToGroup(groupId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 그룹 생성
         * @summary create new group API
         * @param {string} body 그룹 이름
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomGroup(body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.createCustomGroup(body, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 그룹 삭제
         * @summary delete group API
         * @param {ModelLong} groupId 삭제할 그룹 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(groupId: ModelLong, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.deleteGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 기본 그룹을 제외하고 멤버가 가지고 있는 모든 그룹(즐겨찾기 포함) 반환
         * @summary get group list API
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsExceptDefault(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.getGroupsExceptDefault(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 멤버가 만든 그룹 & 그룹 내의 친구 리스트 조회(메인화면 용)
         * @summary get group list with friend API
         * @param {ModelLong} id 멤버 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsWithFriend(id: ModelLong, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.getGroupsWithFriend(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 멤버가 등록한 그룹 내의 모든 친구 목록 조회
         * @summary get group friend list API
         * @param {ModelLong} groupId 조회를 원하는 그룹 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncludeGroupFriendNames(groupId: ModelLong, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.getIncludeGroupFriendNames(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 그룹에 포함되지 않은 친구 목록을 조회. 그룹에 새로운 친구를 추가하기 위함이다. 이때, 조회되는 친구들은 멤버가 친구로 등록하되 해당 그룹에 등록되지 않은 친구들이다.
         * @summary get not included friends in group API
         * @param {ModelLong} groupId 그룹 ID
         * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotIncludeGroupFriendNames(groupId: ModelLong, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.getNotIncludeGroupFriendNames(groupId, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 친구 리스트를 받아서 해당 그룹에서 일괄 삭제함. 이때, 친구 리스트는 모두 해당 그룹에 속해있어야 함
         * @summary delete group friend API
         * @param {ModelLong} groupId 그룹 id
         * @param {Array<string>} requestBody 삭제하려는 친구 이름 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIncludeGroupFriends(groupId: ModelLong, requestBody: Array<string>, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.removeIncludeGroupFriends(groupId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 그룹 이름 수정
         * @summary modify group name API
         * @param {ModelLong} groupId 이름을 변경할 그룹 id
         * @param {string} body 변경할 새로운 이름
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupName(groupId: ModelLong, body: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.updateGroupName(groupId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 친구 리스트를 받아서 해당 그룹에 일괄 추가
     * @summary add friends to group API
     * @param {ModelLong} groupId 친구를 추가할 그룹 ID
     * @param {Array<string>} requestBody 추가하려는 친구 이름 리스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public addFriendsToGroup(groupId: ModelLong, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).addFriendsToGroup(groupId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 그룹 생성
     * @summary create new group API
     * @param {string} body 그룹 이름
     * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createCustomGroup(body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).createCustomGroup(body, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 그룹 삭제
     * @summary delete group API
     * @param {ModelLong} groupId 삭제할 그룹 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public deleteGroup(groupId: ModelLong, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).deleteGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기본 그룹을 제외하고 멤버가 가지고 있는 모든 그룹(즐겨찾기 포함) 반환
     * @summary get group list API
     * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public getGroupsExceptDefault(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).getGroupsExceptDefault(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 멤버가 만든 그룹 & 그룹 내의 친구 리스트 조회(메인화면 용)
     * @summary get group list with friend API
     * @param {ModelLong} id 멤버 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public getGroupsWithFriend(id: ModelLong, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).getGroupsWithFriend(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 멤버가 등록한 그룹 내의 모든 친구 목록 조회
     * @summary get group friend list API
     * @param {ModelLong} groupId 조회를 원하는 그룹 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public getIncludeGroupFriendNames(groupId: ModelLong, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).getIncludeGroupFriendNames(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 그룹에 포함되지 않은 친구 목록을 조회. 그룹에 새로운 친구를 추가하기 위함이다. 이때, 조회되는 친구들은 멤버가 친구로 등록하되 해당 그룹에 등록되지 않은 친구들이다.
     * @summary get not included friends in group API
     * @param {ModelLong} groupId 그룹 ID
     * @param {} [UNKNOWN_PARAMETER_NAME] Token 내의 ID 값
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public getNotIncludeGroupFriendNames(groupId: ModelLong, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).getNotIncludeGroupFriendNames(groupId, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 친구 리스트를 받아서 해당 그룹에서 일괄 삭제함. 이때, 친구 리스트는 모두 해당 그룹에 속해있어야 함
     * @summary delete group friend API
     * @param {ModelLong} groupId 그룹 id
     * @param {Array<string>} requestBody 삭제하려는 친구 이름 리스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public removeIncludeGroupFriends(groupId: ModelLong, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).removeIncludeGroupFriends(groupId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 그룹 이름 수정
     * @summary modify group name API
     * @param {ModelLong} groupId 이름을 변경할 그룹 id
     * @param {string} body 변경할 새로운 이름
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public updateGroupName(groupId: ModelLong, body: string, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).updateGroupName(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
}

