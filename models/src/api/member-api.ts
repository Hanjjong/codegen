/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ErrorResponse } from '../../src/model';
// @ts-ignore
import { Locate } from '../../src/model';
// @ts-ignore
import { ResponseWithData } from '../../src/model';
// @ts-ignore
import { Seoul42 } from '../../src/model';
/**
 * MemberApi - axios parameter creator
 * @export
 */
export const MemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 멤버 위치 설정 가능 여부 조회 API
         * @summary get member location
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLocate: async (UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/member/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 친구 생성 API
         * @summary create friend
         * @param {string} friendName 
         * @param {string} img 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {} [UNKNOWN_PARAMETER_NAME2] 친구 카뎃 intra id
         * @param {} [UNKNOWN_PARAMETER_NAME3] image URL
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriend: async (friendName: string, img: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendName' is not null or undefined
            assertParamExists('createFriend', 'friendName', friendName)
            // verify required parameter 'img' is not null or undefined
            assertParamExists('createFriend', 'img', img)
            const localVarPath = `/v3/member/friend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (UNKNOWN_PARAMETER_NAME2 !== undefined) {
                localVarQueryParameter['friedName'] = UNKNOWN_PARAMETER_NAME2;
            }

            if (UNKNOWN_PARAMETER_NAME3 !== undefined) {
                localVarQueryParameter['imageUrl'] = UNKNOWN_PARAMETER_NAME3;
            }

            if (friendName !== undefined) {
                localVarQueryParameter['friendName'] = friendName;
            }

            if (img !== undefined) {
                localVarQueryParameter['img'] = img;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 맴버 생성 하는 POST API
         * @summary createMember API
         * @param {Seoul42} seoul42 
         * @param {} [UNKNOWN_PARAMETER_NAME] 맴버 확인용 세션
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember: async (seoul42: Seoul42, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seoul42' is not null or undefined
            assertParamExists('createMember', 'seoul42', seoul42)
            const localVarPath = `/v3/member/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['session'] = typeof UNKNOWN_PARAMETER_NAME === 'string'
                    ? UNKNOWN_PARAMETER_NAME
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seoul42, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 친구 삭제 API
         * @summary delete friends list
         * @param {Array<string>} requestBody 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriends: async (requestBody: Array<string>, UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('deleteFriends', 'requestBody', requestBody)
            const localVarPath = `/v3/member/friend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 모든 친구 조회 API
         * @summary get all friends list
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefaultFriends: async (UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/member/friend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 맴버 상태 메시지 조회 API
         * @summary get member status message
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalMsg: async (UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/member/status-msg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 맴버 프로필과 현재 위치를 조회하는 API
         * @summary get member information
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberInformation: async (UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/member/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 동료평가 정보 설정 API
         * @summary post Eval button
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvalOn: async (UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/member/eval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 멤버 위치 설정 API
         * @summary post member location
         * @param {Locate} locate 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocate: async (locate: Locate, UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locate' is not null or undefined
            assertParamExists('updateLocate', 'locate', locate)
            const localVarPath = `/v3/member/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 맴버 상태 메시지 설정 API
         * @summary post member personal status message
         * @param {string} body 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonalMsg: async (body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePersonalMsg', 'body', body)
            const localVarPath = `/v3/member/status-msg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberApi - functional programming interface
 * @export
 */
export const MemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberApiAxiosParamCreator(configuration)
    return {
        /**
         * 멤버 위치 설정 가능 여부 조회 API
         * @summary get member location
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLocate(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkLocate(UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 친구 생성 API
         * @summary create friend
         * @param {string} friendName 
         * @param {string} img 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {} [UNKNOWN_PARAMETER_NAME2] 친구 카뎃 intra id
         * @param {} [UNKNOWN_PARAMETER_NAME3] image URL
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFriend(friendName: string, img: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFriend(friendName, img, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 맴버 생성 하는 POST API
         * @summary createMember API
         * @param {Seoul42} seoul42 
         * @param {} [UNKNOWN_PARAMETER_NAME] 맴버 확인용 세션
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMember(seoul42: Seoul42, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMember(seoul42, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 친구 삭제 API
         * @summary delete friends list
         * @param {Array<string>} requestBody 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFriends(requestBody: Array<string>, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFriends(requestBody, UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 모든 친구 조회 API
         * @summary get all friends list
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDefaultFriends(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDefaultFriends(UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 맴버 상태 메시지 조회 API
         * @summary get member status message
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalMsg(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalMsg(UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 맴버 프로필과 현재 위치를 조회하는 API
         * @summary get member information
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberInformation(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberInformation(UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 동료평가 정보 설정 API
         * @summary post Eval button
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvalOn(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvalOn(UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 멤버 위치 설정 API
         * @summary post member location
         * @param {Locate} locate 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocate(locate: Locate, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocate(locate, UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 맴버 상태 메시지 설정 API
         * @summary post member personal status message
         * @param {string} body 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersonalMsg(body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePersonalMsg(body, UNKNOWN_PARAMETER_NAME, iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberApi - factory interface
 * @export
 */
export const MemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberApiFp(configuration)
    return {
        /**
         * 멤버 위치 설정 가능 여부 조회 API
         * @summary get member location
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLocate(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<number> {
            return localVarFp.checkLocate(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 친구 생성 API
         * @summary create friend
         * @param {string} friendName 
         * @param {string} img 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {} [UNKNOWN_PARAMETER_NAME2] 친구 카뎃 intra id
         * @param {} [UNKNOWN_PARAMETER_NAME3] image URL
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriend(friendName: string, img: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.createFriend(friendName, img, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 맴버 생성 하는 POST API
         * @summary createMember API
         * @param {Seoul42} seoul42 
         * @param {} [UNKNOWN_PARAMETER_NAME] 맴버 확인용 세션
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(seoul42: Seoul42, UNKNOWN_PARAMETER_NAME?: , options?: any): AxiosPromise<string> {
            return localVarFp.createMember(seoul42, UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 친구 삭제 API
         * @summary delete friends list
         * @param {Array<string>} requestBody 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriends(requestBody: Array<string>, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.deleteFriends(requestBody, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 모든 친구 조회 API
         * @summary get all friends list
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefaultFriends(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.getAllDefaultFriends(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 맴버 상태 메시지 조회 API
         * @summary get member status message
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalMsg(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.getPersonalMsg(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 맴버 프로필과 현재 위치를 조회하는 API
         * @summary get member information
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberInformation(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.memberInformation(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 동료평가 정보 설정 API
         * @summary post Eval button
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvalOn(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.updateEvalOn(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 멤버 위치 설정 API
         * @summary post member location
         * @param {Locate} locate 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocate(locate: Locate, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<ResponseWithData> {
            return localVarFp.updateLocate(locate, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 맴버 상태 메시지 설정 API
         * @summary post member personal status message
         * @param {string} body 
         * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
         * @param {string} [iD] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonalMsg(body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updatePersonalMsg(body, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberApi - object-oriented interface
 * @export
 * @class MemberApi
 * @extends {BaseAPI}
 */
export class MemberApi extends BaseAPI {
    /**
     * 멤버 위치 설정 가능 여부 조회 API
     * @summary get member location
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public checkLocate(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).checkLocate(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 친구 생성 API
     * @summary create friend
     * @param {string} friendName 
     * @param {string} img 
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {} [UNKNOWN_PARAMETER_NAME2] 친구 카뎃 intra id
     * @param {} [UNKNOWN_PARAMETER_NAME3] image URL
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public createFriend(friendName: string, img: string, UNKNOWN_PARAMETER_NAME?: , UNKNOWN_PARAMETER_NAME2?: , UNKNOWN_PARAMETER_NAME3?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).createFriend(friendName, img, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 맴버 생성 하는 POST API
     * @summary createMember API
     * @param {Seoul42} seoul42 
     * @param {} [UNKNOWN_PARAMETER_NAME] 맴버 확인용 세션
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public createMember(seoul42: Seoul42, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).createMember(seoul42, UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 친구 삭제 API
     * @summary delete friends list
     * @param {Array<string>} requestBody 
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public deleteFriends(requestBody: Array<string>, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).deleteFriends(requestBody, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 모든 친구 조회 API
     * @summary get all friends list
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public getAllDefaultFriends(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getAllDefaultFriends(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 맴버 상태 메시지 조회 API
     * @summary get member status message
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public getPersonalMsg(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getPersonalMsg(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 맴버 프로필과 현재 위치를 조회하는 API
     * @summary get member information
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public memberInformation(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).memberInformation(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 동료평가 정보 설정 API
     * @summary post Eval button
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public updateEvalOn(UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateEvalOn(UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 멤버 위치 설정 API
     * @summary post member location
     * @param {Locate} locate 
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public updateLocate(locate: Locate, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateLocate(locate, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 맴버 상태 메시지 설정 API
     * @summary post member personal status message
     * @param {string} body 
     * @param {} [UNKNOWN_PARAMETER_NAME] DB 에서 맴버 조회를 위한 key get 용도
     * @param {string} [iD] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public updatePersonalMsg(body: string, UNKNOWN_PARAMETER_NAME?: , iD?: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updatePersonalMsg(body, UNKNOWN_PARAMETER_NAME, iD, options).then((request) => request(this.axios, this.basePath));
    }
}

